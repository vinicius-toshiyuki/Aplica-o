CREATE TABLE IF NOT EXISTS DISCIPLINA (
	DISC_COD SERIAL NOT NULL PRIMARY KEY,
	NOME VARCHAR(50) NOT NULL
);

CREATE TABLE IF NOT EXISTS PROFESSOR (
	PROF_COD SERIAL NOT NULL PRIMARY KEY,
	NOME VARCHAR(100) NOT NULL,
	EMAIL VARCHAR(100) NOT NULL UNIQUE,
	SENHA VARCHAR(30) NOT NULL,
	FOTO BYTEA,
	DATA_NASC DATE,
	DATA_CADR TIMESTAMP WITHOUT TIME ZONE DEFAULT (NOW() AT TIME ZONE 'UTC+3') NOT NULL
);

CREATE TABLE IF NOT EXISTS TURMA (
	TURMA_COD CHAR(1) NOT NULL,
	SEMESTRE CHAR(5) NOT NULL, -- ex.: 20171
	DISC_COD INTEGER NOT NULL,
	PROF_COD INTEGER NOT NULL,

	PRIMARY KEY (TURMA_COD, SEMESTRE, DISC_COD),
	FOREIGN KEY (PROF_COD) REFERENCES PROFESSOR(PROF_COD),
	FOREIGN KEY (DISC_COD) REFERENCES DISCIPLINA(DISC_COD)
);

CREATE TABLE IF NOT EXISTS ALUNO (
	MATRICULA CHAR(9) NOT NULL PRIMARY KEY,
	NOME VARCHAR(100),
	EMAIL VARCHAR(100) NOT NULL UNIQUE,	
	SENHA VARCHAR(30) NOT NULL,
	FOTO BYTEA,
	DATA_NASC DATE,
	DATA_CADR TIMESTAMP WITHOUT TIME ZONE DEFAULT (NOW() AT TIME ZONE 'UTC+3') NOT NULL,
	TURMA_COD CHAR(1),
	SEMESTRE CHAR(5),
	DISC_COD INTEGER,
	FOREIGN KEY (TURMA_COD, SEMESTRE, DISC_COD) REFERENCES TURMA(TURMA_COD, SEMESTRE, DISC_COD)
);

CREATE TABLE IF NOT EXISTS MONITORIA (
	MATRICULA CHAR(9) NOT NULL,
	TURMA_COD CHAR(1) NOT NULL,
	SEMESTRE CHAR(5) NOT NULL,
	DISC_COD INTEGER NOT NULL,

	PRIMARY KEY (MATRICULA, TURMA_COD, SEMESTRE, DISC_COD),
	FOREIGN KEY (MATRICULA) REFERENCES ALUNO(MATRICULA),
	FOREIGN KEY (TURMA_COD, SEMESTRE, DISC_COD) REFERENCES TURMA(TURMA_COD, SEMESTRE, DISC_COD)
);

CREATE TABLE IF NOT EXISTS LINGUAGEM (
	LINGUAGEM_COD SERIAL NOT NULL PRIMARY KEY,
	NOME VARCHAR(50) NOT NULL UNIQUE,
	COMANDO_COMPILACAO VARCHAR(150) NOT NULL
);

CREATE TABLE IF NOT EXISTS LINGUAGENS_PERMITIDAS (
	LINGUAGEM_COD INTEGER NOT NULL,
	DISC_COD INTEGER NOT NULL,

	PRIMARY KEY (LINGUAGEM_COD, DISC_COD),
	FOREIGN KEY (LINGUAGEM_COD) REFERENCES LINGUAGEM(LINGUAGEM_COD),
	FOREIGN KEY (DISC_COD) REFERENCES DISCIPLINA(DISC_COD)
);

CREATE TABLE IF NOT EXISTS MODULO (
	MODULO_COD INTEGER NOT NULL,
	DISC_COD INTEGER NOT NULL,

	PRIMARY KEY (MODULO_COD, DISC_COD),
	FOREIGN KEY (DISC_COD) REFERENCES DISCIPLINA(DISC_COD)
);

CREATE TABLE IF NOT EXISTS LISTA (
	LISTA_COD INTEGER NOT NULL,
	MODULO_COD INTEGER NOT NULL,
	DISC_COD INTEGER NOT NULL,
	DESCRICAO BYTEA NOT NULL,
	DATA_HR_INICIO TIMESTAMP,
	DATA_HR_FIM TIMESTAMP,
	TIPO CHAR(1) NOT NULL CHECK (TIPO IN ('L', 'P')),
	VISIBILIDADE CHAR(1) NOT NULL CHECK (VISIBILIDADE IN ('S', 'N')),

	PRIMARY KEY (LISTA_COD, MODULO_COD, DISC_COD),
	FOREIGN KEY (MODULO_COD, DISC_COD) REFERENCES MODULO(MODULO_COD, DISC_COD)
);

CREATE TABLE IF NOT EXISTS PROBLEMA (
	PROBLEMA_COD INTEGER NOT NULL,
	LISTA_COD INTEGER NOT NULL,
	MODULO_COD INTEGER NOT NULL,
	DISC_COD INTEGER NOT NULL,
	TITULO VARCHAR(50),
	DESCRICAO BYTEA NOT NULL,
	DIFICULDADE SMALLINT CHECK (DIFICULDADE IN (1,2,3)),
	LIMITE_MEM INTEGER NOT NULL,
	LIMITE_TEMPO INTEGER NOT NULL,

	PRIMARY KEY (PROBLEMA_COD, LISTA_COD, MODULO_COD, DISC_COD),
	FOREIGN KEY (LISTA_COD, MODULO_COD, DISC_COD) REFERENCES LISTA(LISTA_COD, MODULO_COD, DISC_COD)
);

CREATE TABLE IF NOT EXISTS ENTRADA (
	ENTRADA_COD SERIAL NOT NULL,
	PROBLEMA_COD INTEGER NOT NULL,
	LISTA_COD INTEGER NOT NULL,
	MODULO_COD INTEGER NOT NULL,
	DISC_COD INTEGER NOT NULL,
	ARQUIVO BYTEA NOT NULL,

	PRIMARY KEY (ENTRADA_COD, PROBLEMA_COD, LISTA_COD, MODULO_COD, DISC_COD),
	FOREIGN KEY (PROBLEMA_COD, LISTA_COD, MODULO_COD, DISC_COD) REFERENCES PROBLEMA(PROBLEMA_COD, LISTA_COD, MODULO_COD, DISC_COD)
);

CREATE TABLE IF NOT EXISTS SAIDA (
	SAIDA_COD SERIAL NOT NULL,
	PROBLEMA_COD INTEGER NOT NULL,
	LISTA_COD INTEGER NOT NULL,
	MODULO_COD INTEGER NOT NULL,
	DISC_COD INTEGER NOT NULL,
	ARQUIVO BYTEA NOT NULL,
	
	PRIMARY KEY (SAIDA_COD, PROBLEMA_COD, LISTA_COD, MODULO_COD, DISC_COD),
	FOREIGN KEY (PROBLEMA_COD, LISTA_COD, MODULO_COD, DISC_COD) REFERENCES PROBLEMA(PROBLEMA_COD, LISTA_COD, MODULO_COD, DISC_COD)
);

CREATE TABLE IF NOT EXISTS SUBMISSAO (
	SUBMISSAO_COD SERIAL PRIMARY KEY,
	DATA_HORA TIMESTAMP WITHOUT TIME ZONE DEFAULT (NOW() AT TIME ZONE 'UTC+3') NOT NULL,
	ARQUIVO BYTEA NOT NULL,
	MEM_UTILI INTEGER,
	TEMPO_EXEC INTEGER,
	VEREDITO VARCHAR(150),
	MATRICULA CHAR(9),
	LINGUAGEM_COD INTEGER NOT NULL,
	PROBLEMA_COD INTEGER NOT NULL,
	LISTA_COD INTEGER NOT NULL,
	MODULO_COD INTEGER NOT NULL,
	DISC_COD INTEGER NOT NULL,

	FOREIGN KEY (MATRICULA) REFERENCES ALUNO(MATRICULA),
	FOREIGN KEY (LINGUAGEM_COD) REFERENCES LINGUAGEM(LINGUAGEM_COD),
	FOREIGN KEY (PROBLEMA_COD, LISTA_COD, MODULO_COD, DISC_COD) REFERENCES PROBLEMA(PROBLEMA_COD, LISTA_COD, MODULO_COD, DISC_COD)
);

CREATE OR REPLACE FUNCTION TOGGLE_VISIBILIDADE(INTEGER, INTEGER, INTEGER)
	RETURNS TEXT AS '
		DECLARE
			VAR1 TEXT;
		BEGIN
			SELECT VISIBILIDADE INTO VAR1 FROM LISTA WHERE DISC_COD = $1 AND MODULO_COD = $2 AND LISTA_COD = $3;
			IF VAR1 = ''S''
			THEN
				SELECT ''N'' INTO VAR1;
				RETURN VAR1;
			END IF;
			SELECT ''S'' INTO VAR1;
			RETURN VAR1;
		END;' LANGUAGE 'plpgsql';

CREATE OR REPLACE FUNCTION TOGGLE_PROVA(INTEGER, INTEGER, INTEGER)
	RETURNS TEXT AS '
		DECLARE
			VAR1 TEXT;
		BEGIN
			SELECT PROVA INTO VAR1 FROM LISTA WHERE DISC_COD = $1 AND MODULO_COD = $2 AND LISTA_COD = $3;
			IF VAR1 = ''P''
			THEN
				SELECT ''L'' INTO VAR1;
				RETURN VAR1;
			END IF;
			SELECT ''P'' INTO VAR1;
			RETURN VAR1;
		END;' LANGUAGE 'plpgsql';
-- '
CREATE OR REPLACE VIEW PROBLEMAS_COMPLETOS AS (
	SELECT
		P.PROBLEMA_COD PROBLEMA_COD,
		P.LISTA_COD LISTA_COD,
		P.MODULO_COD MODULO_COD,
		P.DISC_COD DISC_COD,
		P.TITULO TITULO,
		P.DESCRICAO DESCRICAO,
		P.DIFICULDADE DIFICULDADE,
		LIMITE_MEM,
		LIMITE_TEMPO,
		TIPO,
		VISIBILIDADE
	FROM
		PROBLEMA P JOIN	LISTA L
		USING (LISTA_COD, MODULO_COD, DISC_COD)
);

CREATE OR REPLACE VIEW LINGUAGEM_DAS_DISCIPLINAS AS	(
		SELECT
			LINGUAGEM_COD,
			NOME,
			COMANDO_COMPILACAO,
			DISC_COD
		FROM
			LINGUAGEM JOIN LINGUAGENS_PERMITIDAS
			USING (LINGUAGEM_COD)
);
