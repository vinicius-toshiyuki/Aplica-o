CREATE TABLE IF NOT EXISTS PROFESSOR (
	COD SERIAL NOT NULL PRIMARY KEY,
	NOME VARCHAR(500) NOT NULL,
	EMAIL VARCHAR(500) NOT NULL UNIQUE,
	SENHA VARCHAR(50) NOT NULL,
	FOTO BYTEA,
	DATA_NASC DATE,
	DATA_CADR TIMESTAMP WITHOUT TIME ZONE DEFAULT (NOW() AT TIME ZONE 'UTC+3') NOT NULL
);

CREATE TABLE IF NOT EXISTS DISCIPLINA (
	COD SERIAL NOT NULL PRIMARY KEY,
	NOME VARCHAR(500) NOT NULL
);

CREATE TABLE IF NOT EXISTS TURMA (
	COD INTEGER NOT NULL,
	SEMESTRE CHAR(5) NOT NULL, -- ex.: 20171
	PROF_COD INTEGER NOT NULL,
	DISC_COD INTEGER NOT NULL,

	PRIMARY KEY (COD, SEMESTRE, DISC_COD),
	FOREIGN KEY (PROF_COD) REFERENCES PROFESSOR(COD),
	FOREIGN KEY (DISC_COD) REFERENCES DISCIPLINA(COD)
);

CREATE TABLE IF NOT EXISTS ALUNO (
	MATRICULA DECIMAL(9) NOT NULL PRIMARY KEY,
	NOME VARCHAR(500),
	EMAIL VARCHAR(500) NOT NULL UNIQUE,	
	SENHA VARCHAR(500) NOT NULL,
	FOTO BYTEA,
	DATA_NASC DATE,
	DATA_CADR TIMESTAMP WITHOUT TIME ZONE DEFAULT (NOW() AT TIME ZONE 'UTC+3') NOT NULL,

	TURMA_COD INTEGER,
	TURMA_SEMESTRE CHAR(5),
	DISC_COD INTEGER,
	FOREIGN KEY (TURMA_COD, TURMA_SEMESTRE, DISC_COD) REFERENCES TURMA(COD, SEMESTRE, DISC_COD)
);

CREATE TABLE IF NOT EXISTS MONITOR_TURMA (
	ALUNO_MATR DECIMAL(9) NOT NULL,
	TURMA_COD INTEGER NOT NULL,
	TURMA_SEMESTRE CHAR(5) NOT NULL,
	DISC_COD INTEGER NOT NULL,

	PRIMARY KEY (ALUNO_MATR, TURMA_COD, TURMA_SEMESTRE, DISC_COD),
	FOREIGN KEY (ALUNO_MATR) REFERENCES ALUNO(MATRICULA),
	FOREIGN KEY (TURMA_COD, TURMA_SEMESTRE, DISC_COD) REFERENCES TURMA(COD, SEMESTRE, DISC_COD)
);

CREATE TABLE IF NOT EXISTS LING_PROGR (
	COD SERIAL NOT NULL PRIMARY KEY,
	NOME VARCHAR(500) NOT NULL,
	COMAND_COMPILA VARCHAR(1000) NOT NULL
);

CREATE TABLE IF NOT EXISTS LING_PROGR_DISCI (
	LING_PROGR_COD INTEGER NOT NULL,
	DISC_COD INTEGER NOT NULL,

	PRIMARY KEY (LING_PROGR_COD, DISC_COD),
	FOREIGN KEY (LING_PROGR_COD) REFERENCES LING_PROGR(COD),
	FOREIGN KEY (DISC_COD) REFERENCES DISCIPLINA(COD)
);

CREATE TABLE IF NOT EXISTS MODULO (
	NUMERO INTEGER NOT NULL,
	DISC_COD INTEGER NOT NULL,

	PRIMARY KEY (NUMERO, DISC_COD),
	FOREIGN KEY (DISC_COD) REFERENCES DISCIPLINA(COD)
);

CREATE TABLE IF NOT EXISTS LISTA (
	COD INTEGER NOT NULL,
	DESCR BYTEA NOT NULL,
	DATA_HR_INICIO TIMESTAMP,
	DATA_HR_FIM TIMESTAMP,
	VISIBILIDADE CHAR(1) NOT NULL,
	PROVA CHAR(1) NOT NULL,
	MODULO_COD INTEGER NOT NULL,
	DISC_COD INTEGER,

	PRIMARY KEY (COD, MODULO_COD, DISC_COD),
	FOREIGN KEY (MODULO_COD, DISC_COD) REFERENCES MODULO(NUMERO, DISC_COD)
);

CREATE TABLE IF NOT EXISTS PROBLEMA (
	COD INTEGER NOT NULL,
	LISTA_COD INTEGER NOT NULL,
	MODULO_COD INTEGER NOT NULL,
	DISC_COD INTEGER NOT NULL,
	TITULO VARCHAR(300),
	DESCR VARCHAR(4000),
	DIFICUL VARCHAR(50),
	LIMITE_MEM VARCHAR(500),
	LIMITE_TEMP VARCHAR(500),

	PRIMARY KEY (COD, LISTA_COD, MODULO_COD, DISC_COD),
	FOREIGN KEY (LISTA_COD, MODULO_COD, DISC_COD) REFERENCES LISTA(COD, MODULO_COD, DISC_COD)
);

CREATE TABLE IF NOT EXISTS ENTRADA (
	COD SERIAL,
	PROBLEMA_COD INTEGER NOT NULL,
	LISTA_COD INTEGER NOT NULL,
	MODULO_COD INTEGER NOT NULL,
	DISC_COD INTEGER NOT NULL,
	ARQUIVO BYTEA NOT NULL,

	PRIMARY KEY (COD, PROBLEMA_COD, LISTA_COD, MODULO_COD, DISC_COD),
	FOREIGN KEY (PROBLEMA_COD, LISTA_COD, MODULO_COD, DISC_COD) REFERENCES PROBLEMA(COD, LISTA_COD, MODULO_COD, DISC_COD)
);

CREATE TABLE IF NOT EXISTS SAIDA (
	COD SERIAL,
	PROBLEMA_COD INTEGER NOT NULL,
	LISTA_COD INTEGER NOT NULL,
	MODULO_COD INTEGER NOT NULL,
	DISC_COD INTEGER NOT NULL,
	ARQUIVO BYTEA NOT NULL,
	
	PRIMARY KEY (COD, PROBLEMA_COD, LISTA_COD, MODULO_COD, DISC_COD),
	FOREIGN KEY (PROBLEMA_COD, LISTA_COD, MODULO_COD, DISC_COD) REFERENCES PROBLEMA(COD, LISTA_COD, MODULO_COD, DISC_COD)
);

CREATE TABLE IF NOT EXISTS SUBMISSAO (
	COD SERIAL PRIMARY KEY,
	DATA_HORA TIMESTAMP WITHOUT TIME ZONE DEFAULT (NOW() AT TIME ZONE 'UTC+3') NOT NULL,
	ARQUIVO BYTEA NOT NULL,
	MEM_UTILI VARCHAR(4000),
	TEMPO_EXEC VARCHAR(4000),
	VEREDITO VARCHAR(500) NOT NULL,
	ALUNO_MATR DECIMAL(9),
	PROBLEMA_COD INTEGER NOT NULL,
	LISTA_COD INTEGER NOT NULL,
	MODULO_COD INTEGER NOT NULL,
	DISC_COD INTEGER NOT NULL,
	LING_PROGR_COD INTEGER NOT NULL,

	FOREIGN KEY (ALUNO_MATR) REFERENCES ALUNO(MATRICULA),
	FOREIGN KEY (PROBLEMA_COD, LISTA_COD, MODULO_COD, DISC_COD) REFERENCES PROBLEMA(COD, LISTA_COD, MODULO_COD, DISC_COD),
	FOREIGN KEY (LING_PROGR_COD) REFERENCES LING_PROGR(COD)
);

CREATE OR REPLACE FUNCTION TOGGLE_VISIBILIDADE(INTEGER, INTEGER, INTEGER)
	RETURNS TEXT AS '
		DECLARE
			VAR1 TEXT;
		BEGIN
			SELECT VISIBILIDADE INTO VAR1 FROM LISTA WHERE DISC_COD = $1 AND MODULO_COD = $2 AND COD = $3;
			IF VAR1 = ''S''
			THEN
				SELECT ''N'' INTO VAR1;
				RETURN VAR1;
			END IF;
			SELECT ''S'' INTO VAR1;
			RETURN VAR1;
		END;' LANGUAGE 'plpgsql';

CREATE OR REPLACE FUNCTION TOGGLE_PROVA(INTEGER, INTEGER, INTEGER)
	RETURNS TEXT AS '
		DECLARE
			VAR1 TEXT;
		BEGIN
			SELECT PROVA INTO VAR1 FROM LISTA WHERE DISC_COD = $1 AND MODULO_COD = $2 AND COD = $3;
			IF VAR1 = ''S''
			THEN
				SELECT ''N'' INTO VAR1;
				RETURN VAR1;
			END IF;
			SELECT ''S'' INTO VAR1;
			RETURN VAR1;
		END;' LANGUAGE 'plpgsql';
-- '
CREATE OR REPLACE VIEW PROBLEMAS_COMPLETOS AS (
	SELECT
		P.COD COD,
		P.LISTA_COD LISTA_COD,
		P.MODULO_COD MODULO_COD,
		P.DISC_COD DISC_COD,
		P.TITULO TITULO,
		P.DESCR DESCR,
		P.DIFICUL DIFICUL,
		LIMITE_MEM,
		LIMITE_TEMP,
		VISIBILIDADE,
		PROVA
	FROM
		PROBLEMA P
		JOIN
		LISTA L
		ON P.LISTA_COD = L.COD
	WHERE
		P.MODULO_COD = L.MODULO_COD
		AND
		P.DISC_COD = L.DISC_COD
);

CREATE OR REPLACE VIEW LINGUAGEM_DAS_DISCIPLINAS AS	(
		SELECT
			COD,
			NOME,
			COMAND_COMPILA,
			DISC_COD
		FROM
			LING_PROGR
			JOIN
			LING_PROGR_DISCI
			ON LING_PROGR_COD  = COD
);
